---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';

const pageTitle = "产品防伪码 Demo";
---

<Layout title={pageTitle}>
    <main>
        <h1>{pageTitle}</h1>

        <section id="generate-code-section">
            <h2>防伪码生成</h2>
            <form id="generate-form" class="code-form">
                <div class="form-group">
                    <label for="sku-input">SKU (6 位 HEX):</label>
                    <input
                        type="text"
                        id="sku-input"
                        name="sku"
                        placeholder="例如: ABCDEF"
                        maxlength="6"
                        required
                        pattern="^[0-9A-Fa-f]{6}$"
                    />
                </div>
                <div class="form-group">
                    <label for="channel-input">Channel (2 位 HEX):</label>
                    <input
                        type="text"
                        id="channel-input"
                        name="channel"
                        placeholder="例如: 12"
                        maxlength="2"
                        required
                        pattern="^[0-9A-Fa-f]{2}$"
                    />
                </div>
                <button type="submit" class="action-button">生成防伪码</button>
                <div class="form-group">
                    <label for="generated-code-output">生成的防伪码:</label>
                    <div class="clickable-output">
                        <textarea
                            id="generated-code-output"
                            readonly
                            placeholder="生成的防伪码将显示在这里"
                        ></textarea>
                    </div>
                </div>
            </form>
        </section>

        <section id="validate-code-section">
            <h2>防伪码验证 (POST)</h2>
            <form id="validate-form" class="code-form">
                <div class="form-group">
                    <label for="validate-code-input">防伪码:</label>
                    <input
                        type="text"
                        id="validate-code-input"
                        name="securityCode"
                        placeholder="输入防伪码进行验证"
                        required
                    />
                </div>
                <button type="submit" class="action-button">验证</button>
                <div class="form-group">
                    <label for="validation-result-output">验证结果:</label>
                    <textarea
                        id="validation-result-output"
                        readonly
                        placeholder="验证结果将显示在这里 (API Response Body)"
                    ></textarea>
                </div>
            </form>
        </section>
    </main>

    <style>
      :root {
          --color-bg: #ffffff;
          --color-text: #1a1a1a;
          --color-primary: #333333;
          --color-secondary: #666666;
          --color-border: #e0e0e0;
          --color-button: #1a1a1a;
          --color-button-hover: #333333;
      }

      main {
          max-width: 800px;
          margin: 20px auto;
          padding: 20px;
          font-family: system-ui, -apple-system, sans-serif;
          color: var(--color-text);
      }

      h1 {
          color: var(--color-primary);
          text-align: center;
          margin-bottom: 2rem;
      }

      section {
          margin-bottom: 30px;
          padding: 20px;
          border: 1px solid var(--color-border);
          border-radius: 8px;
          background-color: var(--color-bg);
      }

      h2 {
          margin-top: 0;
          color: var(--color-primary);
      }

      .code-form {
          display: flex;
          flex-direction: column;
          gap: 1rem;
      }

      .form-group {
          margin-bottom: 15px;
      }

      .form-group label {
          display: block;
          margin-bottom: 5px;
          font-weight: 500;
          color: var(--color-secondary);
          font-size: 1rem;
      }

      .form-group input[type="text"] {
          width: 100%;
          padding: 10px;
          padding-right: 20px;
          border: 1px solid var(--color-border);
          border-radius: 4px;
          font-size: 1rem;
          background-color: var(--color-bg);
          box-sizing: border-box;
      }

      .clickable-output {
          position: relative;
          cursor: pointer;
          display: flex;
          align-items: center;
      }

      .clickable-output textarea,
      .form-group textarea {
          width: 100%;
          padding: 10px;
          padding-right: 20px;
          border: 1px solid var(--color-border);
          border-radius: 4px;
          font-size: 1rem;
          font-family: system-ui, -apple-system, sans-serif;
          resize: none;
          box-sizing: border-box;
      }

      .clickable-output textarea {
          background-color: #f5f5f5;
          padding: 10px;
          padding-right: 20px;
          border: 1px solid var(--color-border);
          border-radius: 4px;
          font-size: 1rem;
          font-family: system-ui, -apple-system, sans-serif;
          resize: none;
          box-sizing: border-box;
          height: 2em;
          line-height: 50%;
          cursor: pointer;
      }

      .clickable-output textarea:hover {
          background-color: #eeeeee;
      }

      #validation-result-output {
          min-height: 8em;
          overflow-y: auto;
      }

      .action-button {
          padding: 10px 20px;
          background-color: var(--color-button);
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          font-size: 1rem;
          align-self: flex-start;
      }

      .action-button:hover {
          background-color: var(--color-button-hover);
      }

      /* Responsive Design */
      @media (max-width: 768px) {
          main {
              padding: 10px;
              margin: 10px;
          }

          section {
              padding: 15px;
          }

          .action-button {
              width: 100%;
          }
      }

      @media (max-width: 480px) {
          h1 {
              font-size: 1.5rem;
          }

          h2 {
              font-size: 1.2rem;
          }

          .form-group input[type="text"],
          .form-group textarea {
              font-size: 1rem;
          }
      }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const generateForm = document.getElementById('generate-form') as HTMLFormElement;
            const validateForm = document.getElementById('validate-form') as HTMLFormElement;
            const generatedCodeOutput = document.getElementById('generated-code-output') as HTMLTextAreaElement;
            const validationResultOutput = document.getElementById('validation-result-output') as HTMLTextAreaElement;
            const clickableOutput = document.querySelector('.clickable-output') as HTMLElement;

            clickableOutput?.addEventListener('click', async () => {
                const text = generatedCodeOutput.value;
                if (!text) return;

                try {
                    await navigator.clipboard.writeText(text);
                } catch (err) {
                    console.error('复制失败:', err);
                }
            });

            generateForm?.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(generateForm);
                const sku = (formData.get('sku') as string).trim().toUpperCase();
                const channel = (formData.get('channel') as string).trim().toUpperCase();

                try {
                    const response = await fetch('/api/generate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ sku, channel })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        generatedCodeOutput.value = `Error: ${response.status} ${response.statusText}\n${JSON.stringify(errorData, null, 2)}`;
                    } else {
                        const responseData = await response.json() as { securityCode: string };
                        generatedCodeOutput.value = responseData.securityCode;
                    }
                } catch (error) {
                    generatedCodeOutput.value = `Fetch Error: ${error}`;
                }
            });

            validateForm?.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(validateForm);
                const securityCode = (formData.get('securityCode') as string).trim();

                try {
                    const response = await fetch('/api/validate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ securityCode })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        validationResultOutput.value = `Error: ${response.status} ${response.statusText}\n${JSON.stringify(errorData, null, 2)}`;
                    } else {
                        const responseData = await response.json();
                        validationResultOutput.value = JSON.stringify(responseData, null, 2);
                    }
                } catch (error) {
                    validationResultOutput.value = `Fetch Error: ${error}`;
                }
            });
        });
    </script>
</Layout>